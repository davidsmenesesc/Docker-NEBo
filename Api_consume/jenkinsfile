
pipeline {

  environment {
    dockerimagebackend = "davidsmenesesc/cosa-loca"
    dockerBack= ""
    GIT_TOKEN= credentials('Ansible-git-creds')
  }

agent any
stages {
    stage('checkout'){
        steps{
            checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/davidsmenesesc/cosa-loca.git']])
        }
    }
    stage('Build image') {
      steps{
        script {
        sh 'ls'    
        dir('Api_consume') {
                dockerBack = docker.build dockerimagebackend
            }   
        }
      }
    }
    stage('Pushing Image') {
      environment {
               registryCredential = 'Dockerhub'
           }
      steps{
        script {
          docker.withRegistry( 'https://registry.hub.docker.com', registryCredential ) {
            sh 'env | sort'
            dockerBack.push('latest')
          }
        }
      }
    }
    stage('checkout IAC'){
        steps{
            checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/davidsmenesesc/iac-crash-course.git']])
        }
    }
    stage('Terraform init'){
      steps{
          sh 'terraform init'
      }
    }
    // stage('Terraform apply'){
    //   steps{
    //       sh 'terraform apply --auto-approve'
    //   }
    // }
    stage('checkout ansible repo'){
      steps{
        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'Ansible-git-creds', url: 'https://github.com/davidsmenesesc/ansible-task.git']])
      }
    }
    stage('Execute playbook'){
        steps{
            sh'ls'
            sh 'cat deploy.yaml'
            sh 'cat inventory.ini'
            sh 'cat deploy.yaml '
            ansiblePlaybook credentialsId: 'Ssh-key', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'inventory.ini', playbook: 'deploy.yaml'
        }
    }
 }
}